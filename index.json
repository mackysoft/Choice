{
  "api/MackySoft.Choice.html": {
    "href": "api/MackySoft.Choice.html",
    "title": "Namespace MackySoft.Choice | Choice",
    "keywords": "Namespace MackySoft.Choice Classes WeightedSelectMethod WeightedSelector WeightedSelector<TItem> WeightedSelectorExtensions Interfaces IReadOnlyWeightedSelector<T> IWeightedSelectMethod IWeightedSelector<T>"
  },
  "api/MackySoft.Choice.IReadOnlyWeightedSelector-1.html": {
    "href": "api/MackySoft.Choice.IReadOnlyWeightedSelector-1.html",
    "title": "Interface IReadOnlyWeightedSelector<T> | Choice",
    "keywords": "Interface IReadOnlyWeightedSelector<T> Namespace : MackySoft.Choice Assembly : cs.temp.dll.dll Syntax public interface IReadOnlyWeightedSelector<T> : IReadOnlyDictionary<T, float>, IReadOnlyCollection<KeyValuePair<T, float>>, IEnumerable<KeyValuePair<T, float>>, IEnumerable Type Parameters Name Description T Methods SelectItem(Single) Returns a selected item from weights. Declaration T SelectItem(float value) Parameters Type Name Description Single value Value for selecting an index. The value must be between 0.0f and 1.0f. Returns Type Description T"
  },
  "api/MackySoft.Choice.IWeightedSelectMethod.html": {
    "href": "api/MackySoft.Choice.IWeightedSelectMethod.html",
    "title": "Interface IWeightedSelectMethod | Choice",
    "keywords": "Interface IWeightedSelectMethod Namespace : MackySoft.Choice Assembly : cs.temp.dll.dll Syntax public interface IWeightedSelectMethod Methods Calculate(TemporaryArray<Single>) Calculate the required data. Declaration void Calculate(TemporaryArray<float> weights) Parameters Type Name Description TemporaryArray < Single > weights SelectIndex(TemporaryArray<Single>, Single) Returns a selected index from weights. Declaration int SelectIndex(TemporaryArray<float> weights, float value) Parameters Type Name Description TemporaryArray < Single > weights An array of weights consisting of 0 or more numbers. Single value Value for selecting an index. The value must be between 0.0f and 1.0f. Returns Type Description Int32 Selected index from weights."
  },
  "api/MackySoft.Choice.IWeightedSelector-1.html": {
    "href": "api/MackySoft.Choice.IWeightedSelector-1.html",
    "title": "Interface IWeightedSelector<T> | Choice",
    "keywords": "Interface IWeightedSelector<T> Inherited Members IReadOnlyWeightedSelector<T>.SelectItem(Single) Namespace : MackySoft.Choice Assembly : cs.temp.dll.dll Syntax public interface IWeightedSelector<T> : IReadOnlyWeightedSelector<T>, IReadOnlyDictionary<T, float>, IReadOnlyCollection<KeyValuePair<T, float>>, IDictionary<T, float>, ICollection<KeyValuePair<T, float>>, IEnumerable<KeyValuePair<T, float>>, IEnumerable Type Parameters Name Description T"
  },
  "api/MackySoft.Choice.WeightedSelectMethod.html": {
    "href": "api/MackySoft.Choice.WeightedSelectMethod.html",
    "title": "Class WeightedSelectMethod | Choice",
    "keywords": "Class WeightedSelectMethod Inheritance Object WeightedSelectMethod Namespace : MackySoft.Choice Assembly : cs.temp.dll.dll Syntax public static class WeightedSelectMethod Properties Binary The binary search algorithm that is faster than linear scan by preprocessing to store the current sum of weights. It has an additional storage cost of O(n), but is accelerated by up to O(log(n)) for each selection, where n is number of weights. Declaration public static IWeightedSelectMethod Binary { get; } Property Value Type Description IWeightedSelectMethod Linear The simplest algorithm that walks linearly along the weights. This method is an O(n) operation, where n is number of weights. Declaration public static IWeightedSelectMethod Linear { get; } Property Value Type Description IWeightedSelectMethod"
  },
  "api/MackySoft.Choice.WeightedSelector.html": {
    "href": "api/MackySoft.Choice.WeightedSelector.html",
    "title": "Class WeightedSelector | Choice",
    "keywords": "Class WeightedSelector Inheritance Object WeightedSelector Namespace : MackySoft.Choice Assembly : cs.temp.dll.dll Syntax public static class WeightedSelector Methods Empty<T>() Declaration public static IReadOnlyWeightedSelector<T> Empty<T>() Returns Type Description IReadOnlyWeightedSelector <T> Type Parameters Name Description T"
  },
  "api/MackySoft.Choice.WeightedSelector-1.html": {
    "href": "api/MackySoft.Choice.WeightedSelector-1.html",
    "title": "Class WeightedSelector<TItem> | Choice",
    "keywords": "Class WeightedSelector<TItem> Inheritance Object WeightedSelector<TItem> Implements IWeightedSelector <TItem> IReadOnlyWeightedSelector <TItem> Namespace : MackySoft.Choice Assembly : cs.temp.dll.dll Syntax public class WeightedSelector<TItem> : IWeightedSelector<TItem>, IReadOnlyWeightedSelector<TItem>, IReadOnlyDictionary<TItem, float>, IReadOnlyCollection<KeyValuePair<TItem, float>>, IDictionary<TItem, float>, ICollection<KeyValuePair<TItem, float>>, IEnumerable<KeyValuePair<TItem, float>>, IEnumerable, IDisposable Type Parameters Name Description TItem Constructors WeightedSelector(IEnumerable<TItem>, Func<TItem, Single>, IWeightedSelectMethod) Declaration public WeightedSelector(IEnumerable<TItem> source, Func<TItem, float> weightSelector, IWeightedSelectMethod method) Parameters Type Name Description IEnumerable <TItem> source Func <TItem, Single > weightSelector IWeightedSelectMethod method WeightedSelector(IEnumerable<KeyValuePair<TItem, Single>>, IWeightedSelectMethod) Declaration public WeightedSelector(IEnumerable<KeyValuePair<TItem, float>> source, IWeightedSelectMethod method) Parameters Type Name Description IEnumerable < KeyValuePair <TItem, Single >> source IWeightedSelectMethod method Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Item[TItem] Declaration public float this[TItem item] { get; set; } Parameters Type Name Description TItem item Property Value Type Description Single Methods Add(TItem, Single) Declaration public void Add(TItem item, float weight) Parameters Type Name Description TItem item Single weight Clear() Declaration public void Clear() ContainsKey(TItem) Declaration public bool ContainsKey(TItem item) Parameters Type Name Description TItem item Returns Type Description Boolean Dispose() Declaration public void Dispose() Finalize() Declaration protected void Finalize() GetEnumerator() Declaration public IEnumerator<KeyValuePair<TItem, float>> GetEnumerator() Returns Type Description IEnumerator < KeyValuePair <TItem, Single >> Remove(TItem) Declaration public bool Remove(TItem item) Parameters Type Name Description TItem item Returns Type Description Boolean SelectItem(Single) Declaration public TItem SelectItem(float value) Parameters Type Name Description Single value Returns Type Description TItem TryGetValue(TItem, out Single) Declaration public bool TryGetValue(TItem item, out float value) Parameters Type Name Description TItem item Single value Returns Type Description Boolean Implements IWeightedSelector<T> IReadOnlyWeightedSelector<T>"
  },
  "api/MackySoft.Choice.WeightedSelectorExtensions.html": {
    "href": "api/MackySoft.Choice.WeightedSelectorExtensions.html",
    "title": "Class WeightedSelectorExtensions | Choice",
    "keywords": "Class WeightedSelectorExtensions Inheritance Object WeightedSelectorExtensions Namespace : MackySoft.Choice Assembly : cs.temp.dll.dll Syntax public static class WeightedSelectorExtensions Methods SelectItemWithUnityRandom<T>(IReadOnlyWeightedSelector<T>) Returns a random selected item from weights using . Declaration public static T SelectItemWithUnityRandom<T>(this IReadOnlyWeightedSelector<T> weightedSelector) Parameters Type Name Description IReadOnlyWeightedSelector <T> weightedSelector Returns Type Description T Type Parameters Name Description T ToWeightedSelector<TItem>(IEnumerable<TItem>, Func<TItem, Single>) Declaration public static IWeightedSelector<TItem> ToWeightedSelector<TItem>(this IEnumerable<TItem> source, Func<TItem, float> weightSelector) Parameters Type Name Description IEnumerable <TItem> source Func <TItem, Single > weightSelector Returns Type Description IWeightedSelector <TItem> Type Parameters Name Description TItem ToWeightedSelector<TItem>(IEnumerable<TItem>, Func<TItem, Single>, IWeightedSelectMethod) Declaration public static IWeightedSelector<TItem> ToWeightedSelector<TItem>(this IEnumerable<TItem> source, Func<TItem, float> weightSelector, IWeightedSelectMethod method) Parameters Type Name Description IEnumerable <TItem> source Func <TItem, Single > weightSelector IWeightedSelectMethod method Returns Type Description IWeightedSelector <TItem> Type Parameters Name Description TItem ToWeightedSelector<TItem>(IEnumerable<KeyValuePair<TItem, Single>>) Declaration public static IWeightedSelector<TItem> ToWeightedSelector<TItem>(this IEnumerable<KeyValuePair<TItem, float>> source) Parameters Type Name Description IEnumerable < KeyValuePair <TItem, Single >> source Returns Type Description IWeightedSelector <TItem> Type Parameters Name Description TItem ToWeightedSelector<TItem>(IEnumerable<KeyValuePair<TItem, Single>>, IWeightedSelectMethod) Declaration public static IWeightedSelector<TItem> ToWeightedSelector<TItem>(this IEnumerable<KeyValuePair<TItem, float>> source, IWeightedSelectMethod method) Parameters Type Name Description IEnumerable < KeyValuePair <TItem, Single >> source IWeightedSelectMethod method Returns Type Description IWeightedSelector <TItem> Type Parameters Name Description TItem ToWeightedSelector<TSource, TItem>(IEnumerable<TSource>, Func<TSource, TItem>, Func<TSource, Single>) Declaration public static IWeightedSelector<TItem> ToWeightedSelector<TSource, TItem>(this IEnumerable<TSource> source, Func<TSource, TItem> itemSelector, Func<TSource, float> weightSelector) Parameters Type Name Description IEnumerable <TSource> source Func <TSource, TItem> itemSelector Func <TSource, Single > weightSelector Returns Type Description IWeightedSelector <TItem> Type Parameters Name Description TSource TItem ToWeightedSelector<TSource, TItem>(IEnumerable<TSource>, Func<TSource, TItem>, Func<TSource, Single>, IWeightedSelectMethod) Declaration public static IWeightedSelector<TItem> ToWeightedSelector<TSource, TItem>(this IEnumerable<TSource> source, Func<TSource, TItem> itemSelector, Func<TSource, float> weightSelector, IWeightedSelectMethod method) Parameters Type Name Description IEnumerable <TSource> source Func <TSource, TItem> itemSelector Func <TSource, Single > weightSelector IWeightedSelectMethod method Returns Type Description IWeightedSelector <TItem> Type Parameters Name Description TSource TItem ToWeightedSelector<TSource, TItem>(IEnumerable<KeyValuePair<TSource, Single>>, Func<TSource, TItem>) Declaration public static IWeightedSelector<TItem> ToWeightedSelector<TSource, TItem>(this IEnumerable<KeyValuePair<TSource, float>> source, Func<TSource, TItem> itemSelector) Parameters Type Name Description IEnumerable < KeyValuePair <TSource, Single >> source Func <TSource, TItem> itemSelector Returns Type Description IWeightedSelector <TItem> Type Parameters Name Description TSource TItem ToWeightedSelector<TSource, TItem>(IEnumerable<KeyValuePair<TSource, Single>>, Func<TSource, TItem>, IWeightedSelectMethod) Declaration public static IWeightedSelector<TItem> ToWeightedSelector<TSource, TItem>(this IEnumerable<KeyValuePair<TSource, float>> source, Func<TSource, TItem> itemSelector, IWeightedSelectMethod method) Parameters Type Name Description IEnumerable < KeyValuePair <TSource, Single >> source Func <TSource, TItem> itemSelector IWeightedSelectMethod method Returns Type Description IWeightedSelector <TItem> Type Parameters Name Description TSource TItem"
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Changelog | Choice",
    "keywords": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [1.0.0] - 2021-02-01 Added Added the IWeightedSelector<T> and WeightedSelector<T> . Added an unit tests. Changes Renamed the ToReadOnlyWeightedSelector method to ToWeightedSelector . Renamed the SelectItem method that used UnityEngine.Random.value to SelectItemWithUnityRandom . All WeightedSelectMethods now support weights less than or equal to 0. IWeightedSelectMethod now takes a TemporaryArray as an argument instead of a float[]. Fixes Fixed a fatal bug that prevented BinaryWeightedSelectMethod from working. [0.1.0] - 2021-01-19 First release"
  },
  "index.html": {
    "href": "index.html",
    "title": "Choice - Weighted Random Selector | Choice",
    "keywords": "Choice - Weighted Random Selector Created by Hiroya Aramaki ( Makihiro ) What is Weighted Random Selector ? Weighted Random Selector is an algorithm for randomly selecting elements based on their weights. For example. Drop items based on rarity. Events that occur with a certain probability It can be used to determine things with probability. Choice is a library that was created to make it easier to implement. Great introduction article on Weighted Random Select: https://blog.bruce-hill.com/a-faster-weighted-random-choice Table of Contents 📥 Installation 🔰 Usage ToWeightedSelector Overloads LINQ Algorithms Linear Scan Binary Search 📔 Author Info 📜 License 📥 Installation Download any version from releases. Releases: https://github.com/mackysoft/Choice/releases Install via git URL Or, you can add this package by opening PackageManager and entering https://github.com/mackysoft/Choice.git?path=Assets/MackySoft/MackySoft.Choice from the Add package from git URL option. Install via Open UPM Or, you can install this package from the Open UPM registry. More details here . openupm add com.mackysoft.choice 🔰 Usage // To use Choice, add this namespace. using MackySoft.Choice; public class WeightedItem { public string id; public float weight; } public WeightedItem SelectItem () { // Prepare weighted items. var items = new WeightedItem[] { new WeightedItem { id = \"🍒\", weight = 8f }, new WeightedItem { id = \"🍏\", weight = 4f }, new WeightedItem { id = \"🍍\", weight = 0f }, new WeightedItem { id = \"🍇\", weight = 6f }, new WeightedItem { id = \"🍊\", weight = -1f } }; // Create the WeightedSelector. var weightedSelector = items.ToWeightedSelector(item => item.weight); // The probability of each item being selected, // 🍒 is 44%, 🍏 is 22%, and 🍇 is 33%. // 🍍 and 🍊 will never be selected because their weights are less or equal to 0. return weightedSelector.SelectItemWithUnityRandom(); // Same as weightedSelector.SelectItem(UnityEngine.Random.value); } ToWeightedSelector Overloads The ToWeightedSelector method has many overloads and can be used for a variety of patterns. public class WeightedItem { public string id; public float weight; } public class Item { public string id; } public struct ItemEntry { public Item item; public float weight; } public IWeightedSelector<WeightedItem> WeightedItemPattern () { var items = new WeightedItem[] { new WeightedItem { id = \"🍒\", weight = 1f }, new WeightedItem { id = \"🍏\", weight = 5f }, new WeightedItem { id = \"🍍\", weight = 3f } }; // Create a WeightedSelector using the weight of the WeightedItem. return fromWeightedItem = items.ToWeightedSelector(weightSelector: item => item.weight); } public IWeightedSelector<Item> WeightedEntryPattern () { var entries = new ItemEntry[] { new ItemEntry { item = new Item { id = \"🍒\" }, weight = 1f }, new ItemEntry { item = new Item { id = \"🍏\" }, weight = 5f }, new ItemEntry { item = new Item { id = \"🍍\" }, weight = 3f } }; // Create a WeightedSelector by selecting item and weight from entry respectively. return entries.ToWeightedSelector( itemSelector: entry => entry.item, weightSelector: entry => entry.weight ); } public IWeightedSelector<Item> DictionaryPattern () { // This need a Dictionary<TItem,float>. (Strictly speaking, IEnumerable<KeyValuePair<TItem,float>>) var dictionary = new Dictionary<Item,float>( { new Item { id = \"🍒\" }, 1f }, { new Item { id = \"🍏\" }, 5f }, { new Item { id = \"🍍\" }, 3f } ); // Create a WeightedSelector with the dictionary key as item and value as weight. return dictionary.ToWeightedSelector(); } LINQ Since the ToWeightedSelector method is defined as an extension of IEnumerable<T> , it can be connected from the LINQ query operators. var randomSelectedItem = items .Where(item => item != null) // null check .ToWeightedSelector(item => item.weight) .SelectItemWithUnityRandom(); Algorithms When creating a WeightedSelector, you can specify the IWeightedSelectMethod . var weightedSelector = items.ToWeightedSelector( item => item.weight, WeightedSelectMethod.Binary // Use the binary search algorithm. ); All ToWeightedSelector methods can specify IWeightedSelectMethod . If this is not specified, the linear scan algorithm will be used automatically. Linear Scan ( WeightedSelectMethod.Linear ) The simplest algorithm that walks linearly along the weights. This method is an O(n) operation, where n is number of weights. Binary Search ( WeightedSelectMethod.Binary ) The binary search algorithm that is faster than linear scan by preprocessing to store the current sum of weights. It has an additional storage cost of O(n) , but is accelerated by up to O(log(n)) for each selection, where n is number of weights. 📔 Author Info Hiroya Aramaki is a indie game developer in Japan. Blog: https://mackysoft.net/blog Twitter: https://twitter.com/makihiro_dev 📜 License This library is under the MIT License."
  }
}